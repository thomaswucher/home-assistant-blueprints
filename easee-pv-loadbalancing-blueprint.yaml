blueprint:
  domain: automation
  name: Easee PV Loadbalancing
  description: This automation connects your PV inverter and Easee for PV load balancing.
  source_url: https://gitlab.com/thomaswucher/home-assistant-blueprints/-/raw/main/easee-pv-loadbalancing-blueprint.yml
  input:
    isolarpower:
      name: Solar power sensor
      description: 'By default: sensor.pv_power'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: sensor.pv_power
    iconsumptionpower:
      name: Consumption power sensor
      description: 'By default: sensor.house_consumption'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: sensor.house_consumption
    ibatterysoc:
      name: HOME battery state of charge sensor
      description: 'By default: sensor.battery_state_of_charge'
      selector:
        entity:
          domain: sensor
          device_class: battery
          multiple: false
      default: sensor.battery_state_of_charge
    iexternalvoltagel1:
      name: External voltage sensor L1
      description: 'By default: sensor.on_grid_l1_voltage'
      selector:
        entity:
          domain: sensor
          device_class: voltage
          multiple: false
      default: sensor.on_grid_l1_voltage
    iexternalvoltagel2:
      name: External voltage sensor L2
      description: 'By default: sensor.on_grid_l2_voltage'
      selector:
        entity:
          domain: sensor
          device_class: voltage
          multiple: false
      default: sensor.on_grid_l2_voltage
    iexternalvoltagel3:
      name: External voltage sensor L3
      description: 'By default: sensor.on_grid_l3_voltage'
      selector:
        entity:
          domain: sensor
          device_class: voltage
          multiple: false
      default: sensor.on_grid_l3_voltage
    ichargerpower:
      name: Easee charging power sensor
      description: 'By default (kW): sensor.<your easee name>_power'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
    ichargerdynamiclimit:
      name: Easee Charger Dynamic limit sensor
      description: 'By default: sensor.<your easee name>_dynamic_charger_limit'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
    ichargerstatus:
      name: Easee Charger Status sensor
      description: 'By default: sensor.<your easee name>_status'
      selector:
        entity:
          domain: sensor
          multiple: false
    ichargerenabled:
      name: Easee Charger Enabled sensor
      description: 'By default: input_boolean.<your easee name>_charger_enabled'
      selector:
        entity:
          domain: input_boolean
          multiple: false
    ichargeralwayssupplyminimum:
      name: Easee Charger should always charge at 7A
      description: 'By default: input_boolean.<your custom switch>'
      selector:
        entity:
          domain: input_boolean
          multiple: false
    iminbatterylevel:
      name: 'Boost charging with homebattery if SoC is above:'
      description: Boost charging with home battery power if home battery SoC is above
        this limit.
      selector:
        entity:
          domain: input_number
          multiple: false
    ipercentageforcar:
      name: 'Use percentage of available energy for car:'
      description: Only use the specified energy percentage for the car if the homebattery
        is below boosting SoC.
      selector:
        number:
          min: 0.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
      default: 70
    ibatteryboostpower:
      name: Maximum homebattery discharge capacity
      description: Set your home battery maximum discharge power.
      selector:
        number:
          unit_of_measurement: W
          mode: box
          step: 100
          min: 0
          max: 25000
      default: 10000
trigger:
- platform: state
  entity_id:
  - !input 'isolarpower'
  - !input 'iconsumptionpower'
condition:
- condition: and
  conditions:
    - condition: state
      entity_id: !input 'ichargerenabled'
      state: 'on'
    - condition: or
      conditions:
        - condition: state
          entity_id: !input 'ichargerstatus'
          state: charging
        - condition: state
          entity_id: !input 'ichargerstatus'
          state: ready_to_charge
        - condition: state
          entity_id: !input 'ichargerstatus'
          state: awaiting_start
- condition: template
  value_template: '{{ (states(entChargerDynamicLimit)|int) != valCurrentAvailableForCharging|int }}'
action:
- choose:
    - conditions:
        - condition: template
          value_template: "{{ valCurrentAvailableForCharging|int >= 7 }}"
      sequence:
        - service: easee.set_charger_dynamic_limit
          data:
            charger_id: '{{ state_attr(entChargerStatus,''id'') }}'
            current: '{{ valCurrentAvailableForCharging }}'
    - conditions:
        - condition: template
          value_template: "{{ valCurrentAvailableForCharging|int < 7 and not states(entChargerAlwaysSupplyMinimum)|bool }}"
      sequence:
        - service: easee.action_command
          data:
            charger_id: '{{ state_attr(entChargerStatus,''id'') }}'
            action_command: pause
    - conditions:
        - condition: template
          value_template: "{{ valCurrentAvailableForCharging|int < 7 and states(entChargerAlwaysSupplyMinimum)|bool }}"
      sequence:
        - service: easee.set_charger_dynamic_limit
          data:
            charger_id: '{{ state_attr(entChargerStatus,''id'') }}'
            current: '7'
- delay: 120
variables:
  entChargerDynamicLimit: !input 'ichargerdynamiclimit'
  entSolarPower: !input 'isolarpower'
  entConsumptionPower: !input 'iconsumptionpower'
  entBatterySOC: !input 'ibatterysoc'
  entBatteryMinSoC: !input 'iminbatterylevel'
  entBatteryBoostPower: !input 'ibatteryboostpower'
  entChargingPower: !input 'ichargerpower'
  entExternalVoltageL1: !input 'iexternalvoltagel1'
  entExternalVoltageL2: !input 'iexternalvoltagel2'
  entExternalVoltageL3: !input 'iexternalvoltagel3'
  entChargerStatus: !input 'ichargerstatus'
  entChargerEnabled: !input 'ichargerenabled'
  entChargerAlwaysSupplyMinimum: !input 'ichargeralwayssupplyminimum'
  entPercentageForCar: !input 'ipercentageforcar'
  valExternalVoltage: '
    {% if state_attr(entChargerStatus, ''config_phaseMode'') == 1 %}
      {{ states(entExternalVoltageL1)|float }}
    {% else %}
      {{ states(entExternalVoltageL1)|float + states(entExternalVoltageL2)|float + states(entExternalVoltageL3)|float }}
    {% endif %}'
  valCurrentAvailableForCharging: '
    {% set powerAvailable = (states(entSolarPower)|float - states(entConsumptionPower)|float + (states(entChargingPower)|float * 1000))|int %}
    {% set battery_plus = states(entBatterySOC)|int - states(entBatteryMinSoC)|int %}
    
    {% if battery_plus > 3 %}
      {% set powerAvailable = powerAvailable + entBatteryBoostPower|float %}
    {% elif battery_plus == 3 %}
      {% set powerAvailable = powerAvailable + 1800 %}
    {% elif battery_plus == 2 %}
      {% set powerAvailable = powerAvailable + 800 %}
    {% elif battery_plus == 1 %}
      {% set powerAvailable = powerAvailable + 250 %}
    {% endif %}

    {% if battery_plus < 0 %}
      {% set powerAvailable = powerAvailable * entPercentageForCar|float / 100 %}
    {% endif %}
    
    {% set EaseeAvailableCurrent = (powerAvailable / valExternalVoltage) | float %}
    
    {% if EaseeAvailableCurrent > 32 %}
      {% set EaseeAvailableCurrent = 32 %}
    {% endif %}

    {{ EaseeAvailableCurrent|int }}'
mode: single
max_exceeded: silent
